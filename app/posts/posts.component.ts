import { Component, inject, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-posts',
  standalone: true,
  imports: [FormsModule, HttpClientModule, CommonModule],
  templateUrl: './posts.component.html',
  styleUrls: ['./posts.component.css']
})
export class PostsComponent implements OnInit {
  httpClient = inject(HttpClient);
  route = inject(ActivatedRoute);
  public data: Array<any> = [];
  public errors: string[] = [];
  validation = false;
  ids: number[] = [];
  listId: BigInt = BigInt(0);
  isToastVisible = false;
  toastMessage = '';

  ngOnInit() {
    this.route.params.subscribe(params => {
      this.listId = params['id'];
      console.log('List ID:', this.listId);
    });

    this.fetchQuestions();
  }

  fetchQuestions() {
    this.httpClient.get('http://localhost:8080/question/AllQuestions')
      .subscribe({
        next: (data: any) => {
      
          this.data = data;
          this.ids = data.map((question: { id: any; }) => question.id);
        },
        error: (err) => console.log(err)
      });
  }

  validateForm(form: NgForm): string[] {
    const errors: string[] = [];

    if (!form.value.question) {
      errors.push('Question is required.');
    }

    if (!form.value.optionA || !form.value.optionB || !form.value.optionC || !form.value.optionD) {
      errors.push('All options (A, B, C, D) are required.');
    }

    if (!form.value.answer) {
      errors.push('Answer is required.');
    } else if (!['A', 'B', 'C', 'D'].includes(form.value.answer)) {
      errors.push('Answer must be one of A, B, C, or D.');
    }

    return errors;
  }

  generateId() {
    let newId: number;
    const generateRandomLong = (): number => {
      return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
    };

    do {
      newId = generateRandomLong();
    } while (this.ids.includes(newId));

    return newId;
  }

  onSubmit(form: NgForm): void {
    console.log(this.listId);
    const autoGeneratedId = this.generateId();

    this.errors = this.validateForm(form);
    if (this.errors.length > 0) {
      this.errors.forEach(error => console.log(error));
      return;
    }

    if (form.valid) {
      this.validation = true;
      const newQuestion = {
        id: autoGeneratedId,
        question: form.value.question,
        optionA: form.value.optionA,
        optionB: form.value.optionB,
        optionC: form.value.optionC,
        optionD: form.value.optionD,
        answer: form.value.answer,
        explanation: form.value.explanation,
        listId: this.listId
      };
      console.log(newQuestion.listId+"this one should be passed");

      this.httpClient.post('http://localhost:8080/question/add', newQuestion)
        .subscribe({
          next: (response) => {
            console.log("Question added successfully:", response);
            this.toastMessage = 'Question added successfully!';
            this.isToastVisible = true;
            setTimeout(() => this.isToastVisible = false, 3000);
            form.reset();
            this.fetchQuestions();
          },
          error: (err) => console.log(err)
        });
    }
  }
}
